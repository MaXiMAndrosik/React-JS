import "./App.css";
import Greeting from "./components/Greeting";
import Counter from "./components/Counter";
import MessageList from "./components/MessageList";
import TextDisplayForm from "./components/TextDisplayForm";
import ThemeSwitcher from "./components/ThemeSwitcher";

// -----------------------------------------------------------------------
// Seminar Task 1
// 	Создайте функциональный компонент Greeting, который принимает проп name и отображает сообщение Привет, {name}!.
// 	Используйте компонент Greeting в вашем основном компоненте App, передавая разные имена в качестве пропсов.

// function App() {
//     return (
//         <div className="App">
//             <header className="App-header">
//                 <Greeting name={"Maxim"} />
//             </header>
//         </div>
//     );
// }

// -----------------------------------------------------------------------
// Seminar Task 2
// Разработайте компонент Counter, который отображает число и
// две кнопки: одна для увеличения значения на 1, а другая для
// уменьшения на 1.
// 2. Используйте хук useState для управления состоянием счётчика.
// 3. Кнопки можно сделать с помощью material ui

// function App() {
//     return (
//         <div className="App">
//             <main className="App-main">
//                 <Counter />
//             </main>
//         </div>
//     );
// }

// -----------------------------------------------------------------------
// Seminar Task 3
// 	Создайте компонент MessagesList, который отображает список
// сообщений. Каждое сообщение должно иметь уникальный id и
// текст.
// 	Используйте проп key при рендеринге списка, чтобы
// обеспечить оптимальную производительность.

// function App() {
//     return (
//         <div className="App">
//             <MessageList />
//         </div>
//     );
// }

// -----------------------------------------------------------------------
// Seminar Task 4
// Создать React компонент TextDisplayForm, который позволяет пользователю ввести
// текст в поле ввода и отобразить его на экране в стилизованном виде по нажатию
// кнопки.

// ● Создание поля ввода (TextField)
// ○ Добавить TextField для ввода текста пользователем.
// ○ Установить метку (label) поля ввода на "Введите текст".
// ○ Сделать поле ввода на всю ширину (fullWidth).

// ● Разместить кнопку под полем ввода.
// ○ Установить текст кнопки на "Отобразить текст".
// ○ При нажатии на кнопку введенный текст должен отображаться под
// кнопкой.
// Отображение введенного текста
// ○ Использовать состояние для хранения введенного и отображаемого текста.
// ○ При нажатии на кнопку текст из поля ввода должен отображаться в
// стилизованной карточке (Card) под кнопкой.
// ● Стилизация отображаемого текста
// ○ Для отображения текста использовать компонент Typography с вариантом
// h5.

// function App() {
//     return (
//         <div className="App">
//             <TextDisplayForm />
//         </div>
//     );
// }

// -----------------------------------------------------------------------
// Seminar Task 5
// Создайте компонент ThemeSwitcher. Этот компонент будет
// содержать кнопку, при нажатии на которую будет меняться
// тема интерфейса (светлая/темная).
// ● Используйте useState для управления текущей темой. Храните
// состояние текущей темы в компоненте ThemeSwitcher.
// Состояние может быть простой строкой, например, "light" или
// "dark".
// ● Передайте текущую тему в виде пропса в другой компонент,
// который изменит свой стиль в зависимости от полученной
// темы. Например, создайте компонент Content, который
// изменяет свой фоновый цвет в зависимости от темы.
// ● Добавьте логику для переключения темы в ThemeSwitcher. При
// нажатии на кнопку должно происходить переключение между
// "light" и "dark" состояниями, и это изменение должно
// отражаться в компоненте Content.

function App() {
    return (
        <div className="App">
            <ThemeSwitcher />
        </div>
    );
}





export default App;
